#!/usr/bin/ruby

# Solve modular quadratic equations
assert_eq(modular_quadratic_formula(3,4,5, 124), %n[47, 55, 109, 117])
assert_eq(modular_quadratic_formula(3/5,4,5,124), %n[19, 57, 81, 119])
assert_eq(modular_quadratic_formula(3/13, 112, 13, 124), %n[9, 43, 71, 105])
assert_eq(modular_quadratic_formula(3/13, 4, 13*5, 124), %n[33, 53, 95, 115])
assert_eq(modular_quadratic_formula(3/13, 4, 5, 124), %n[3, 21, 65, 83])
assert_eq(modular_quadratic_formula(3/13, 4/7, 5, 124), %n[5, 25, 67, 87])
assert_eq(modular_quadratic_formula(3/13, 4/7, 5/11, 125), %n[3, 60])
assert_eq(modular_quadratic_formula(1,1,1,1729), %n[562, 653, 809, 828, 900, 919, 1075, 1166])

assert_eq(quadratic_congruence(2, 5, 3, 7), [2, 6])
assert_eq(quadratic_congruence(8, 6, 4, 15), [])

assert_eq(modular_quadratic_formula(1,1,-1e10 + 8,1e10), %n[1810486343, 2632873031, 7367126968, 8189513656])
assert_eq(modular_quadratic_formula(4,6,10 - 1e10, 1e10), %n[905243171, 1316436515, 7367126967/2, 8189513655/2, 5905243171, 6316436515, 17367126967/2, 18189513655/2])
assert_eq(modular_quadratic_formula(1,1,-1e10 - 10, 1e10), %n[263226214, 1620648089, 8379351910, 9736773785])

assert_eq(linear_congruence(4, 3, 5), [2])
assert_eq(linear_congruence(0, 3, 5), [])
assert_eq(linear_congruence(6, 1, 4), [])
assert_eq(linear_congruence(0, 5, 5), [0, 1, 2, 3, 4])
assert_eq(linear_congruence(3, 12, 15), [4, 9, 14])
assert_eq(linear_congruence(6, 0, 18), [0, 3, 6, 9, 12, 15])
assert_eq(linear_congruence(143, 44, 231), 231.range.grep {|x| 143*x -> is_congruent(44, 231) })

# Several tests from SymPy
assert_eq(quadratic_congruence(400, 85, 125, 1600), [1983/80, 2035/16, 963/5, 295, 27583/80, 7155/16, 2563/5, 615, 53183/80, 12275/16, 4163/5, 935, 78783/80, 17395/16, 5763/5, 1255, 104383/80, 22515/16, 7363/5, 1575])
assert_eq(quadratic_congruence(3, 6, 5, 25), [3, 20])
assert_eq(quadratic_congruence(120, 80, 175, 500), [])
assert_eq(quadratic_congruence(15, 14, 7, 2), [1])
assert_eq(quadratic_congruence(8, 15, 7, 29), [10, 28])
assert_eq(quadratic_congruence(160, 200, 300, 461), [144, 431])
assert_eq(quadratic_congruence(100000, 123456, 7415263, 48112959837082048697), [30417843635344493501, 36001135160550533083])
assert_eq(quadratic_congruence(65, 121, 72, 277), [249, 252])
assert_eq(quadratic_congruence(5, 10, 14, 2), [0])
assert_eq(quadratic_congruence(10, 17, 19, 2), [1])
assert_eq(quadratic_congruence(10, 14, 20, 2), [0, 1])

assert_eq(
    150.of { modular_quadratic_formula(1,1,1, _) }.flat,     # OEIS: A343232
    %n[0, 1, 2, 4, 3, 9, 7, 11, 4, 16, 5, 25, 10, 26, 16, 22, 6, 36, 18, 30, 7, 49, 13, 47, 29, 37, 8, 64, 23, 55, 9, 16, 74, 81, 25, 67, 35, 61, 46, 56, 45, 63, 10, 100, 19, 107, 49, 79, 11, 30, 102, 121, 42, 96, 67, 79],
)

assert_eq(
    50.by { modular_quadratic_formula(1,1,1, _).len > 0 },     # OEIS: A034017
    %n[1, 3, 7, 13, 19, 21, 31, 37, 39, 43, 49, 57, 61, 67, 73, 79, 91, 93, 97, 103, 109, 111, 127, 129, 133, 139, 147, 151, 157, 163, 169, 181, 183, 193, 199, 201, 211, 217, 219, 223, 229, 237, 241, 247, 259, 271, 273, 277, 283, 291],
)

func solve_modular_quadratic(a,b,c,m) {

    var D = (b**2 - 4*a*c).mod(4*a*m)

    var solutions = []

    sqrtmod_all(D, 4*a*m).each {|t|
        #for u in (-b + t, -b - t) {
        for u in (-b + t) {
            var x = (u/(2*a))%m
            assert_eq((a*x*x + b*x + c) % m, 0)
            solutions << x
        }
    }

    return solutions.uniq.sort
}

assert_eq(
    solve_modular_quadratic(400, 85, 125, 1600),
    quadratic_congruence(400, 85, 125, 1600)
)

assert_eq(
    modular_quadratic_formula(1, 886+2, 886, 5**27),
    solve_modular_quadratic(1, 886+2, 886, 5**27)
)

assert_eq(
    modular_quadratic_formula(1, 886+2, 886, 5**29),
    solve_modular_quadratic(1, 886+2, 886, 5**29)
)

assert_eq(
    modular_quadratic_formula(1, 1, 48, 10**26),
    solve_modular_quadratic(1, 1, 48, 10**26),
)

assert_eq(
    modular_quadratic_formula(1, 2*162 + 1, 162**2, 10**27),
    solve_modular_quadratic(1, 2*162 + 1, 162**2, 10**27),
)

assert_eq(
    modular_quadratic_formula(1, 64+2, 64, 10**29),
    solve_modular_quadratic(1, 64+2, 64, 10**29),
)

assert_eq(modular_quadratic_formula(1, 64+2, 64, 5**29)           -> grep{|x| 27464878227068803284697 % 5**29 == x }, [83994533373734925322])
assert_eq(modular_quadratic_formula(1, 1, 38, 10**25)             -> grep {|x| 29901250515623818002025296521 % 10**25 == x }, [1250515623818002025296521])
assert_eq(modular_quadratic_formula(1, 2*10 + 1, 10**2, 10**26)   -> grep {|x| 125171915369277033631620648079 % 10**26 == x }, [71915369277033631620648079])
assert_eq(modular_quadratic_formula(1, 2*162 + 1, 162**2, 10**27) -> grep {|x| 31594928719850170531982385757759 % 10**27 == x }, [928719850170531982385757759])

say "** Tests passed!"

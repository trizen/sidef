#!/usr/bin/ruby

# Tests for Math functions

assert_eq(Math.linear_recurrence([1,1], [0,1], 1000), 1000.fib)
assert_eq(Math.linear_recurrence([1,1], [0,1], 1000, 1010).sum, 1000..1010 -> sum{.fib})

assert_eq(
    Math.linear_recurrence([5, -10, 10, -5, 1], [0, 1, 9, 36, 100], 0, 100).sum,
    0..100 -> sum {.faulhaber(3)}
)

assert_eq(
    Math.linear_recurrence([5, -10, 10, -5, 1], [0, 1, 9, 36, 100], 50, 100).sum,
    50..100 -> sum {.faulhaber(3)}
)

assert_eq(Math.linear_recurrence([4, -6, 4, -1], [0, 1, 5, 14], 1000), faulhaber(1000, 2))
assert_eq(Math.linear_recurrence([5, -10, 10, -5, 1], [0, 1, 9, 36, 100], 10000), faulhaber(10000, 3))

assert_eq(Math.linear_recurrence([5, -10, 10, -5, 1], [0, 1, 9, 36, 100], 0, 10), 11.of{.faulhaber(3)})
assert_eq(Math.linear_recurrence([5, -10, 10, -5, 1], [0, 1, 16, 81, 256], 0, 10), 11.of{_**4})

assert_eq(Math.linear_recurrence(Math.find_linear_recurrence(30.of{.faulhaber(2)}), [0, 1, 5, 14], 0, 10), 11.of{.faulhaber(2)})
assert_eq(Math.linear_recurrence(Math.find_linear_recurrence(30.of{.faulhaber(3)}), [0, 1, 9, 36, 100], 0, 10), 11.of{.faulhaber(3)})

assert_eq(Math.linear_recurrence([2], [1], 0, 10), 11.of{2**_})
assert_eq(Math.linear_recurrence([3], [1], 0, 10), 11.of{3**_})

assert_eq(Math.linear_recurrence([5, -6], [2, 5], 0, 10), 11.of{2**_ + 3**_})
assert_eq(Math.linear_recurrence([10, -31, 30], [3, 10, 38], 0, 10), 11.of{2**_ + 3**_ + 5**_})

assert_eq(Math.linear_recurrence([5, -6], [2, 5], 100), 2**100 + 3**100)
assert_eq(Math.linear_recurrence([10, -31, 30], [3, 10, 38], 100), 2**100 + 3**100 + 5**100)

assert_eq(Math.linear_recurrence([2], [1], 10), 2**10)
assert_eq(Math.linear_recurrence([3], [1], 10), 3**10)

assert_eq(Math.linear_recurrence([-3, 1], [7,2], 0, 10), [7, 2, 1, -1, 4, -13, 43, -142, 469, -1549, 5116])
assert_eq(Math.linear_recurrence([1,1], [1,1], 0, 10), [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89])
assert_eq(Math.linear_recurrence([1,1], [1,1], -6, 6), [5, -3, 2, -1, 1, 0, 1, 1, 2, 3, 5, 8, 13])
assert_eq(Math.linear_recurrence([1,1], [0,1], 0, 10), [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55])
assert_eq(Math.linear_recurrence([2,1], [2,2], 0, 9), [2,2,6,14,34,82,198,478,1154,2786])
assert_eq(Math.linear_recurrence([0,1,1], [3,0,2], 0, 10), [3, 0, 2, 3, 2, 5, 5, 7, 10, 12, 17])

assert_eq(
    Math.linear_rec([5, -10, 10, -5, 1], [0, 1, 9, 36, 100], 286769561645269603005671580204535394554),
    faulhaber(286769561645269603005671580204535394554, 3)
)

assert_eq(
    Math.linear_recmod([5, -10, 10, -5, 1], [0, 1, 9, 36, 100], 286769561645269603005671580204535394554, 529433506846831750329465000269),
    faulhaber(286769561645269603005671580204535394554, 3) % 529433506846831750329465000269
)

assert_eq(
    Math.linear_recurrence(Math.find_linear_recurrence(20.of{.factorial}), 10.of{.factorial}, 0, 19),
    20.of{.factorial}
)

assert_eq(
    Math.linear_recurrence(Math.find_linear_recurrence(20.of{.factorial}), 10.of{.factorial}, 19),
    19!
)

assert_eq(
    gather {
         Math.for(1, { _ <= 10 }, { .inc }).each { take(_) }
    },
    @(1..10)
)

assert_eq(
    gather {
        assert_eq(Math.for(10, { take([:cond, _]); _ <= 5 }, { take([:next, _]); .inc }).first(10), []),
    },
    [[:cond, 10]]
)

assert_eq(
    gather {
        assert_eq(Math.for(9, { take([:cond, _]); _ <= 10 }, { take([:next, _]); .inc }).first(10), [9, 10]),
    },
    [[:cond, 9], [:next, 9], [:cond, 10], [:next, 10], [:cond, 11]]
)

assert_eq(Math.for(2, nil, { .next_prime }).first(25), 25.pn_primes)

say ":: Test passed!"

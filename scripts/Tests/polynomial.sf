#!/usr/bin/ruby

# Tests for the Polynomial() class

func faulhaber_formula(p) {
    (p+1).of { |j|
        Poly(p - j + 1) * bernoulli(j) * binomial(p+1, j)
    }.sum / (p+1)
}

assert_eq(
    faulhaber_formula(19),
    Polynomial(2 => 43867/84, 4 => -68723/40, 6 => 2261, 8 => -223193/140, 10 => 4199/6, 12 => -4199/20, 14 => 323/7, 16 => -323/40, 18 => 19/12, 19 => 1/2, 20 => 1/20)
)

assert_eq(
    faulhaber_formula(20),
    Polynomial(1 => -174611/330, 3 => 219335/63, 5 => -68723/10, 7 => 6460, 9 => -223193/63, 11 => 41990/33, 13 => -323, 15 => 1292/21, 17 => -19/2, 19 => 5/3, 20 => 1/2, 21 => 1/21)
)

assert_eq(
    faulhaber_formula(20).pretty,
    "1/21*x^21 + 1/2*x^20 + 5/3*x^19 - 19/2*x^17 + 1292/21*x^15 - 323*x^13 + 41990/33*x^11 - 223193/63*x^9 + 6460*x^7 - 68723/10*x^5 + 219335/63*x^3 - 174611/330*x"
)

assert_eq(
    legendre_polynomial(20).pretty,
    "34461632205/262144*x^20 - 83945001525/131072*x^18 + 347123925225/262144*x^16 - 49589132175/32768*x^14 + 136745788725/131072*x^12 - 29113619535/65536*x^10 + 15058768725/131072*x^8 - 557732175/32768*x^6 + 334639305/262144*x^4 - 4849845/131072*x^2 + 46189/262144"
)

assert_eq(
    laguerre_polynomial(20).pretty,
    "1/2432902008176640000*x^20 - 1/6082255020441600*x^19 + 19/640237370572800*x^18 - 19/5928123801600*x^17 + 323/1394852659200*x^16 - 323/27243216000*x^15 + 323/726485760*x^14 - 323/25945920*x^13 + 4199/15966720*x^12 - 4199/997920*x^11 + 46189/907200*x^10 - 4199/9072*x^9 + 4199/1344*x^8 - 323/21*x^7 + 323/6*x^6 - 646/5*x^5 + 1615/8*x^4 - 190*x^3 + 95*x^2 - 20*x + 1"
)

assert(Poly() == 0)
assert_eq(Poly(), 0)
assert_eq(Poly(0 => 0), 0)

assert(Poly() != 1)
assert_ne(Poly(), 1)

assert_eq(Poly(), Poly())
assert_eq(Poly(0), Poly(0))
assert_eq(Poly(0 => 0), Poly(0 => 0))

assert_ne(Poly(), Poly(1))
assert_ne(Poly(1), Poly())

with (Poly([1,2,3,4])) {|p|

    assert_eq(
        p / 42,
        Polynomial(0 => 2/21, 1 => 1/14, 2 => 1/21, 3 => 1/42)
    )

    assert_eq(
        42 * p,
        p * 42,
    )

    assert_ne(
        42 * p,
        43 * p,
    )

    assert_eq(
        p.mul(42),
        p.mul(Poly(0 => 42))
    )

    assert_eq(
        p.mul(42),
        Polynomial(0 => 168, 1 => 126, 2 => 84, 3 => 42)
    )

    assert_eq(
        42 - p,
        Polynomial(0 => 38, 1 => -3, 2 => -2, 3 => -1)
    ),

    assert_eq(
        p - 42,
        p.sub(Poly(0 => 42))
    )

    assert_eq(
        42 + p,
        Polynomial(0 => 46, 1 => 3, 2 => 2, 3 => 1)
    )

    assert_eq(
        p + 42,
        p.add(Poly(0 => 42))
    )

    assert_eq(Poly(3 => 10) + Poly(0 => 42), Poly(0 => +42, 3 => 10))
    assert_eq(Poly(3 => 10) - Poly(0 => 42), Poly(0 => -42, 3 => 10))

    assert_eq(Mod(p, 97)**10 <=> p.powmod(10, 97), 0)
    assert_eq(p**3 <=> p**2, 1)
    assert_eq(p**2 <=> p**3, -1)

    assert_eq(
        p % 3,
        Polynomial(0 => 1, 2 => 2, 3 => 1)
    )

    assert_eq(p % 97 -> eval(6), Mod(19, 97))

    assert_eq(
        Poly([0,0,5]),
        5
    )

    assert_ne(
        Mod(Poly([1,2,3]), 97)**10,
        Poly([1,2,3]).powmod(11, 97)
    )

    assert_eq(
        Mod(Poly([1,2,3]), 97)**10,
        Poly([1,2,3]).powmod(10, 97)
    )
}

assert_eq(
    Poly([1,2,3]) + Poly([3,4,5,6]),
    Polynomial(0 => 9, 1 => 7, 2 => 5, 3 => 3)
)

assert_eq(
    Poly([1,2,3]) - Poly([3,4,5,6]),
    Polynomial(0 => -3, 1 => -3, 2 => -3, 3 => -3)
)

assert_eq(
    Poly([1,2,3]) * Poly([3,4,5,6]),
    Polynomial(0 => 18, 1 => 27, 2 => 28, 3 => 22, 4 => 10, 5 => 3)
)

assert_eq(
    Poly([3,4,3+4i, 9]).to_s,
    "3*x^3 + 4*x^2 + (3 + 4i)*x + 9"
)

assert_eq(
    Polynomial(5).to_s,
    'x^5'
)

assert_eq(
    Polynomial([1,2,3,4]).to_s,
    'x^3 + 2*x^2 + 3*x + 4'
)

assert_eq(
    Polynomial(5 => 3, 2 => 10).to_s,
    '3*x^5 + 10*x^2'
)

assert_eq(
    Poly([3,Quadratic(3,4,5),5]).eval(17),
    3*17**2 + Quadratic(3,4,5)*17 + 5
)

assert_eq(
    faulhaber_formula(11).eval(1000),
    1000.faulhaber(11)
)

assert_eq(
    faulhaber_formula(20).eval(12345),
    12345.faulhaber(20)
)

func cyclotomic(n) is cached {
    var x = Poly(n, 1)-1
    var y = n.divisors.grep { _ < n }.prod {|d| __FUNC__(d) }
    x / y
}

assert_eq(cyclotomic(0), 0.cyclotomic)
assert_eq(cyclotomic(1), 1.cyclotomic)
assert_eq(cyclotomic(19), 19.cyclotomic)
assert_eq(cyclotomic(42), 42.cyclotomic)

assert_eq(cyclotomic(0), 0)
assert_eq(cyclotomic(1).to_s, 'x - 1')
assert_eq(cyclotomic(2).to_s, 'x + 1')
assert_eq(cyclotomic(3).to_s, 'x^2 + x + 1')
assert_eq(cyclotomic(4).to_s, 'x^2 + 1')
assert_eq(cyclotomic(12).to_s, 'x^4 - x^2 + 1')
assert_eq(cyclotomic(13).to_s, 'x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1')
assert_eq(cyclotomic(24).to_s, 'x^8 - x^4 + 1')
assert_eq(cyclotomic(30).to_s, 'x^8 + x^7 - x^5 - x^4 - x^3 + x + 1')

assert_eq(Poly(3 => 1) / Poly(2 => 1), Poly(1 => 1))
assert_eq(Poly(5 => 1) / Poly(2 => 1), Poly(3 => 1))

assert_eq(Poly([3,4,5]) % Poly([12,3,14]), Poly(1 => 13/4, 0 => 3/2))
assert_eq(Poly([10, 42]) / Poly([12]), Poly(1 => 5/6, 0 => 7/2))

assert_eq(
    Poly([15,2,3,-4,1,2,-3,-1,2,3]) % Poly([-1,2,3,1,2,-3,9]) -> to_s,
    '1061*x^5 + 1126*x^4 + 591*x^3 + 613*x^2 + 17*x + 2982'
)

with (Poly(1 => 1)) {|x|

    assert_eq(
        Poly([3,4,5])**(-2),
        Fraction(1, 9*x**4 + 24*x**3 + 46*x**2 + 40*x + 25)
    )

    var p = Poly([5,7,11])

    assert_eq(p.inv, p**(-1))

    assert_eq(p/0, Inf)
    assert_eq(p/Poly(), Inf)

    assert_eq(0/p, 0)
    assert_eq(1/p, p.inv)
    assert_eq(2/p, 2*p.inv)

    assert_eq(p.powmod(+5, 97), (Mod(p, 97)**+5))
    assert_eq(p.powmod(-5, 97), (Mod(p, 97)**-5))

    assert_eq(
        (Mod(p, 97)**+5) -> pretty,
        'Mod(21, 97)*x^10 + Mod(50, 97)*x^9 + Mod(80, 97)*x^8 + Mod(54, 97)*x^7 + Mod(60, 97)*x^6 + Mod(90, 97)*x^5 + Mod(35, 97)*x^4 + Mod(79, 97)*x^3 + Mod(6, 97)*x^2 + Mod(81, 97)*x + Mod(31, 97)'
    )

    assert_eq(
        (Mod(p, 97)**+5) -> lift.pretty,
        '21*x^10 + 50*x^9 + 80*x^8 + 54*x^7 + 60*x^6 + 90*x^5 + 35*x^4 + 79*x^3 + 6*x^2 + 81*x + 31'
    )

    assert_eq(
        Mod(p, 97)**-6 -> pretty,
        '(1)/(Mod(8, 97)*x^12 + Mod(9, 97)*x^11 + Mod(11, 97)*x^10 + Mod(22, 97)*x^9 + Mod(6, 97)*x^8 + Mod(9, 97)*x^7 + Mod(10, 97)*x^6 + Mod(78, 97)*x^5 + Mod(95, 97)*x^4 + Mod(55, 97)*x^3 + Mod(12, 97)*x^2 + Mod(41, 97)*x + Mod(50, 97))'
    )

    assert_eq(
        Mod(p, 97)**-6 -> lift.pretty,
        '(1)/(8*x^12 + 9*x^11 + 11*x^10 + 22*x^9 + 6*x^8 + 9*x^7 + 10*x^6 + 78*x^5 + 95*x^4 + 55*x^3 + 12*x^2 + 41*x + 50)'
    )

    assert_eq(Mod(p.powmod(+6, 97), 97), Mod(p, 97)**+6)
    assert_eq(Mod(p.powmod(-6, 97), 97), Mod(p, 97)**-6)

    assert_eq(p.powmod(+6, 97).eval(42), Mod(85, 97))
    assert_eq([p.powmod(-6, 97).nude].map { .eval(42) }.reduce('/'), 1/577294259220123291015625)

    assert_eq(Polynomial(0 => 123, 1 => 4/3, 2 => 4, 3 => 3), Poly([3,4,4/3,123]))

    var a = Poly([11,1,0,3,5])
    var b = Poly([3,0,14])

    assert_eq(a/b, Fraction(11*x**4 + x**3 + 3*x + 5, 3*x**2 + 14))
    assert_eq(floor(a/b), idiv(a,b))
    assert_eq(floor(Fraction(a,b)), (11/3)*x**2 + (1/3)*x - 154/9)

    assert_eq(binomial(x, 0), Polynomial(0 => 1))
    assert_eq(binomial(x, 1), Polynomial(1 => 1))
    assert_eq(binomial(x, 2), Polynomial(1 => -1/2, 2 => 1/2))
    assert_eq(binomial(x, 3), Polynomial(1 => 1/3, 2 => -1/2, 3 => 1/6))
    assert_eq(binomial(x, 10), Polynomial(1 => -1/10, 2 => 7129/25200, 3 => -1303/4032, 4 => 4523/22680, 5 => -19/256, 6 => 3013/172800, 7 => -1/384, 8 => 29/120960, 9 => -1/80640, 10 => 1/3628800))
}

for n in (0..10) {
    var x = irand(50, 100)

    assert_eq(chebyshevT(n).eval(x), chebyshevT(n, x))
    assert_eq(chebyshevU(n).eval(x), chebyshevU(n, x))

    assert_eq(bernoulli_polynomial(n).eval(x), bernoulli_polynomial(n, x))
    assert_eq(faulhaber_polynomial(n).eval(x), faulhaber_polynomial(n, x))
    assert_eq(euler_polynomial(n).eval(x), euler_polynomial(n, x))

    assert_eq(legendre_polynomial(n).eval(x), legendre_polynomial(n, x))

    assert_eq(hermiteH(n).eval(x), hermiteH(n, x))
    assert_eq(hermiteHe(n).eval(x), hermiteHe(n, x))
    assert_eq(laguerreL(n).eval(x), laguerreL(n, x))

    assert_eq(cyclotomic_polynomial(n).eval(x), cyclotomic_polynomial(n, x))
}

do {
    assert_eq(20.of { _**2 }.solve_seq, Poly(2 => 1))
    assert_eq(20.of { .faulhaber(2) }.solve_seq, Polynomial(1 => 1/6, 2 => 1/2, 3 => 1/3))

    assert_eq(20.of { (_+10)**3 }.solve_seq, Polynomial(0 => 1000, 1 => 300, 2 => 30, 3 => 1))
    assert_eq(20.of { (_+10)**3 }.solve_seq(10), Poly(3 => 1))

    assert_eq([].solve_seq, Poly(0 => 0))
    assert_eq([0].solve_seq, Poly(0 => 0))
    assert_eq([1].solve_seq, Poly(0 => 1))
    assert_eq([2].solve_seq, Poly(0 => 2))
}

assert_eq(Poly([3,4]).invmod(97)(1234), Mod(34, 97))
assert_eq(Poly([1,2,3,4]).invmod(97)(1234), Mod(72, 97))

assert_eq(Mod(Poly([3,4]), 97)(42), 33)
assert_eq(Poly([3,4])(42) % 97, 33)

assert_eq(Gauss(Poly([3,4,5]), 42)(99), Gauss(29804, 42))
assert_eq(Gauss(Poly([3,4,5]), Poly([1,2]))(42), Gauss(5465, 44))

assert_eq(Quadratic(Poly([3,4,5]), 42, -1)(99), Quadratic(29804, 42, -1))
assert_eq(Quadratic(Poly([3,4,5]), Poly([1,2]), -1)(42), Quadratic(5465, 44, -1))

assert_eq(Quaternion(Poly([3,4,5]), Poly([1,2]))(42), Quaternion(5465, 44))
assert_eq(Quaternion(Poly([3,4,5]), 155, Poly([1,2]), Poly([4,3]))(42), Quaternion(5465, 155, 44, 171))
assert_eq(Mod(Quaternion(Poly([3,4,5]), 155, Poly([1,2]), Poly([4,3])), 97)(42), Mod(Quaternion(5465 % 97, 155 % 97, 44 % 97, 171 % 97), 97))
assert_eq((Mod(Quaternion(Poly([3,4,5]), 155, Poly([1,2]), Poly([4,3])), 97)**2)(42), Mod(Quaternion(5465 % 97, 155 % 97, 44 % 97, 171 % 97)**2, 97))

assert_eq(Fraction(3,4)(), 3/4)
assert_eq(Fraction(Poly([3, 2]), Poly([1,2,3]))(42), Poly([3,2])(42) / Poly([1,2,3])(42))

assert_eq(Mod(chebyshevU(42), 97)(100), chebyshevU(42, 100) % 97)
assert_eq(Mod(chebyshevU(42), 97)(100), chebyshevUmod(42, 100, 97))

assert_eq(Mod(chebyshevU(42), 97)(15/13), chebyshevU(42, 15/13) % 97)
assert_eq(Mod(chebyshevU(42), 97)(15/13), chebyshevUmod(42, 15/13, 97))

assert_eq(Mod(chebyshevT(42), 97)(100), chebyshevT(42, 100) % 97)
assert_eq(Mod(chebyshevT(42), 97)(100), chebyshevTmod(42, 100, 97))

assert_eq(Mod(chebyshevT(42), 97)(15/13), chebyshevT(42, 15/13) % 97)
assert_eq(Mod(chebyshevT(42), 97)(15/13), chebyshevTmod(42, 15/13, 97))

# (x^2 + 2*x + 3)*x^9 + (4*x^2 + 5*x + 6)*x^3 for x = 7
assert_eq(Poly(3 => Poly([4,5,6]), 9 => Poly([1,2,3])).eval(7), 2663419353)

do {

    func my_derivative(f) {
        Poly(f.coeffs.map_2d{|e,k| [e-1, k*e] }.flat...)
    }

    var coeffs = [
        [5],
        [4,-3],
        [-1,6,5],
        [-4,3,-2,1],
        [-1, 6, 5],
        [1,1,0,-1,-1],
    ]

    var got = []

    for c in (coeffs) {
        var poly = Poly(c.flip)
        var derv = my_derivative(poly)

        assert_eq(derv, poly.derivative)

        var d = { derv.coeff(_) }.map(0..derv.degree)

        got << d

        say "Polynomial : #{'%20s' % c} = #{poly}"
        say "Derivative : #{'%20s' % d} = #{derv}\n"
    }

    assert_eq(
        got,
        [
            [0]
            [-3]
            [6, 10]
            [3, -4, 3]
            [6, 10]
            [1, 0, -3, -4]
        ]
    )
}

do {
    assert_eq([divmod(Poly([32]), Poly([99, 42]))], [0, 32])
    assert_eq([divmod(Poly([32, 19]), Poly([99, 42]))], [32/99, 179/33])
    assert_eq([divmod(Poly([32, 19]), Poly([99, 42, 127]))], [0, Poly([32, 19])])
    assert_eq(Poly([32, 19]) % Poly([99, 42, 127]), Poly([32, 19]))
    assert_eq(Poly([32, 19]) % Poly([99, 42]), 179/33)
    assert_eq(32 % Poly([99, 42]), 32)
    assert_eq(Poly([32]) % Poly([99, 42]), 32)
    assert_eq(Poly().to_s, '0')
    assert_eq(Poly(1).to_s, 'x')
}

do {
    var x = Poly(1);

    var t = (Mod(Mod(6, 541)*x + Mod(540, 541), 541)*x  * Mod(Mod(36, 541)*x*x + Mod(529, 541)*x + Mod(1, 541), 541))
    var m = (x*x + Mod(Mod(535, 541)*x + Mod(1, 541), 541))

    assert_eq(t % m, Mod(357, 541)*x + Mod(103, 541))
    assert_eq([divmod(t, m)], [Mod(216, 541)*x**2 + Mod(106, 541)*x + Mod(438, 541), Mod(357, 541)*x + Mod(103, 541)])
}

do {
    # Algorithm due to Paul Underwood:
    #   https://mersenneforum.org/showpost.php?p=592064&postcount=1

    func RDPRP(n) {

        if (n==2 || n==3 || n==7) {
            return true
        }

        if (n<2 || n.is_even || n.is_div(3) || n.is_div(7) || n.is_square) {
            return false
        }

        var k = kronecker(2, n)
        if (Mod(2, n)**((n-1)/2) != k) {
            return false
        }

        var r = 0
        var t = Mod(4, n)**r
        while ((kronecker(t.lift - 8, n) != -1) || (gcd((r-1)*(2*r - 1), n-1) > 3)) {
            ++r
            t *= 4
        }
        var z = Poly(1)
        Mod(Mod(z, n), z**2 - (t/2 - 2)*z + 1)**((n+1)/2) == k
    }

    assert(!RDPRP(341))
    assert(!RDPRP(561))
    assert(RDPRP(541))
    assert(!RDPRP(530881))
    assert(!RDPRP(2**256 + 1))
    assert(RDPRP(2**127 - 1))
    assert(!RDPRP(1e100.irand.next_composite))
    assert(RDPRP(1e100.random_prime))
}

assert([divmod(Poly([1,2,3,NaN,4,5,6]), Poly([43,1,2]))][0].is_nan)

do {
    var z = Poly(1)

    var a = (7*z**4 + 21*z**3 + 14*z**2)
    var b = (3*z**3 - 6*z**2 - 9*z)

    # FIXME: gcd() and lcm() does not match the output of PARI/GP
    assert_eq(gcd(a, b), Polynomial(1 => 105, 2 => 105))
    assert_eq(lcm(a, b), Polynomial(2 => -6/5, 3 => -7/5, 5 => 1/5))

    var (g, u, v, a1, b1) = gcdext(a,b)
    assert_eq(g, gcd(a,b))
    assert_eq(a1*g, a)
    assert_eq(b1*g, b)
    assert_eq(a*u + b*v, g)

    var t = ((3 - 5*z)*(2 + z))
    var C = t.coeffs

    assert_eq(t, Poly(C))
    assert_eq(Poly(C.first(-1)), -7*z + 6)
    assert_eq(Poly(C.last(-1)), -5*z**2 - 7*z)
}

assert_eq(Poly(5).inc.dec, Poly(5))
assert_eq(Poly(5).dec.inc, Poly(5))
assert_eq(Poly(5).dec, Poly(5) - 1)
assert_eq(Poly(5).inc, Poly(5) + 1)
assert_eq(Poly(5).inc.inc, Poly(5) + 2)
assert_eq(Poly(5).dec.dec, Poly(5) - 2)

assert_eq(Poly(4 => 13, 5 => 7, 4 => 0), Polynomial(5 => 7))
assert_eq(Poly(4 => 13, 4 => 3, 5 => 7), Polynomial(4 => 3, 5 => 7))

# Polynomial parsing

do {
    var a = Poly("x^32 + x^28 - x^20 - x^16 - x^12 + x^4 + 1")
    var b = ::cyclotomic(120)
    assert_eq(a,b)
}

do {
    var a = Poly("x^42 + x^41 + x^40 + x^39 + x^38 + x^37 + x^36 + x^35 + x^34 + x^33 + x^32 + x^31 + x^30 + x^29 + x^28 + x^27 + x^26 + x^25 + x^24 + x^23 + x^22 + x^21 + x^20 + x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1")
    var b = ::cyclotomic(43)
    assert_eq(a,b)
}

do {
    var a = Poly("x^12 - 6*x^11 + 11*x^10 - 33/2*x^8 + 22*x^6 - 33/2*x^4 + 5*x^2 - 691/2730")
    var b = ::bernoulli_polynomial(12)
    assert_eq(a,b)
}

do {
    var a = Poly("x^13 - 13/2*x^12 + 13*x^11 - 143/6*x^9 + 286/7*x^7 - 429/10*x^5 + 65/3*x^3 - 691/210*x")
    var b = ::bernoulli_polynomial(13)
    assert_eq(a,b)
}

do {
    var a = Poly("9694845/2048*x^15 - 35102025/2048*x^13 + 50702925/2048*x^11 - 37182145/2048*x^9 + 14549535/2048*x^7 - 2909907/2048*x^5 + 255255/2048*x^3 - 6435/2048*x")
    var b = ::legendre_polynomial(15)
    assert_eq(a,b)
}

do {
    var a = Poly("300540195/32768*x^16 - 145422675/4096*x^14 + 456326325/8192*x^12 - 185910725/4096*x^10 + 334639305/16384*x^8 - 20369349/4096*x^6 + 4849845/8192*x^4 - 109395/4096*x^2 + 6435/32768")
    var b = ::legendre_polynomial(16)
    assert_eq(a,b)
}

do {
    var a = Poly("32768*x^15 - 1720320*x^13 + 33546240*x^11 - 307507200*x^9 + 1383782400*x^7 - 2905943040*x^5 + 2421619200*x^3 - 518918400*x")
    var b = ::hermiteH(15)
    assert_eq(a,b)
}

do {
    var a = Poly("65536*x^16 - 3932160*x^14 + 89456640*x^12 - 984023040*x^10 + 5535129600*x^8 - 15498362880*x^6 + 19372953600*x^4 - 8302694400*x^2 + 518918400")
    var b = ::hermiteH(16)
    assert_eq(a,b)
}

assert_eq(Poly("x"), Poly(1))
assert_eq(Poly("1/x"), 1/Poly(1))
assert_eq(Poly("5/x"), 5/Poly(1))
assert_eq(Poly("-5/x"), -5/Poly(1))
assert_eq(Poly("5/-x"), 5/-Poly(1))
assert_eq(Poly("1/(x+2)"), 1/(Poly(1)+2))
assert_eq(Poly("3/(x-2)"), 3/(Poly(1)-2))
assert_eq(Poly("1/x^3"), 1/Poly(3))
assert_eq(Poly("1/(x^3 + 1)"), 1/(Poly(3) + 1))
assert_eq(Poly("x^2"), Poly(2))
assert_eq(Poly("x^8 + 1"), Poly(8)+1)
assert_eq(Poly("-x^2"), -Poly(2))
assert_eq(Poly("5*x^2"), 5*Poly(2))
assert_eq(Poly("5*x^2+3"), 5*Poly(2) + 3)
assert_eq(Poly("5*x^2-3"), 5*Poly(2) - 3)
assert_eq(Poly("-5*x^2-3"), -5*Poly(2) - 3)
assert_eq(Poly("-5*x^2"), -5*Poly(2))
assert_eq(Poly("1/3*x^3 + 1/2*x^2 + 1/6*x"), Polynomial(1 => 1/6, 2 => 1/2, 3 => 1/3))
assert_eq(Poly("-5"), -5)
assert_eq(Poly("5"), 5)
assert_eq(Poly("1 - x"), 1 - Poly(1))
assert_eq(Poly("1 + x^2 + x"), 1 + Poly(2) + Poly(1))
assert_eq(Poly("x^(-2)+5"), Poly(-2)+5)
assert_eq(Poly("x^-2+5"), Poly(-2) + 5)
assert_eq(Poly("(3*x^2+5)/(7*x^3+2)"), (3*Poly(2) + 5) / (7*Poly(3) + 2))
assert_eq(Poly("(4*x + 3)/(9*x + 7)"), Fraction(Polynomial(0 => 3, 1 => 4), Polynomial(0 => 7, 1 => 9)))

assert_eq(Poly("x^20 + x^14 + x^9 - x^2 + 1")(2), Poly("(x^21 - x^20 + x^15 - x^14 + x^9 - x^2 + x - 1)/1")(2))
assert_eq(Poly("x^911 - x^456 + 3*x^455 - 1")(7), Poly("(6*x^911 - 4*x^456 + 4*x^455 - 6)/6")(7))

assert_eq(Poly("1/9*x^20 + 2/9*x^16 + 5/9*x^13 + 1/9*x^9 - 1"), Poly("(x^20 + 2*x^16 + 5*x^13 + x^9 - 9)/9"))
assert_eq(Poly("((36*x^2 - 9*x - 27)/(9*x^2 - 2*x - 7))/9"), Poly("(4*x + 3)/(9*x + 7)"))
assert_eq(Poly("((36*x^2 - 9*x - 27)/(9*x^2 - 2*x - 7))/9")(10), Poly("(4*x + 3)/(9*x + 7)")(10))

func log_factorial_correction_terms(terms=10) {
    sum(1..terms, {|k|
        bernoulli(2*k) / (2*k * (2*k - 1) * Poly(2*k - 1))
    })
}

assert_eq(Poly("(1/6)/(2*x)"), log_factorial_correction_terms(1))
assert_eq(Poly("1/(12*x)"), log_factorial_correction_terms(1))

assert_eq(Poly("(2*x^3 - 1/15*x)/(24*x^4)"), log_factorial_correction_terms(2))
assert_eq(Poly("(30*x^2 - 1)/(360*x^3)"), log_factorial_correction_terms(2))

assert_eq(Poly("(60*x^8 - 2*x^6 + 4/7*x^4)/(720*x^9)"), log_factorial_correction_terms(3))
assert_eq(Poly("(210*x^4 - 7*x^2 + 2)/(2520*x^5)"), log_factorial_correction_terms(3))

assert_eq(Poly("(39916800*x^35 - 1330560*x^33 + 380160*x^31 - 285120*x^29 + 403200*x^27 - 11940480/13*x^25)/(479001600*x^36)"), log_factorial_correction_terms(6))
assert_eq(Poly("(180180*x^10 - 6006*x^8 + 1716*x^6 - 1287*x^4 + 1820*x^2 - 4146)/(2162160*x^11)"), log_factorial_correction_terms(6))

do {
    var p1 = Poly("2*x^2 + 3*x - 5")
    var p2 = Poly("-3*x^2 - 4*x + 6")

    var (q,r) = divmod(p1, p2)

    assert_eq(q, Poly("-2/3"))
    assert_eq(r, Poly("1/3*x - 1"))
}

do {
    var p = Poly("6*x^3 + 3*x + 3")
    assert_eq(content(p), 3)
    assert_eq(prim_part(p), Poly("2*x^3 + x + 1"))
    assert(!prim_part(p).is_squarefree)
}

say "** Test passed!"

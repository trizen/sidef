#!/usr/bin/ruby

#
## https://rosettacode.org/wiki/Sub-unit_squares
#

var N   = 12      # how many terms to compute
var arr = Set(1)

for n in (1..Inf) {
    var r = (10**n - 1)/9
    arr << r.diff_of_squares.map{.head}.map{.sqr.digits}.grep {|d|
        (d[-1] != 1) && d.none{.is_zero} && d.map{.dec}.digits2num.is_square
    }.map{.digits2num}...
    break if (arr.len >= N)
}

assert_eq(
    gather {
        arr.sort.first(N).each_kv {|k,n|
            say "#{'%2d' % k+1}: #{take(n)}"
        }
    },
    %n[1, 36, 3136, 24336, 5973136, 71526293136, 318723477136, 264779654424693136, 24987377153764853136, 31872399155963477136, 58396845218255516736, 517177921565478376336]
)

#!/usr/bin/ruby

# Various other tests for the Number methods.
# Some tests are translated from the SymPy library.

func Rational(a,b) {
    a/b
}

assert(bernoulli(0) == 1)
assert(bernoulli(1) == Rational(1, 2))
assert(bernoulli(2) == Rational(1, 6))
assert(bernoulli(3) == 0)
assert(bernoulli(4) == Rational(-1, 30))
assert(bernoulli(5) == 0)
assert(bernoulli(6) == Rational(1, 42))
assert(bernoulli(7) == 0)
assert(bernoulli(8) == Rational(-1, 30))
assert(bernoulli(10) == Rational(5, 66))
assert(bernoulli(1000001) == 0)

with (Poly(1)) {|x|
    assert(bernoulli(0, x) == 1)
    assert(bernoulli(1, x) == (x - Rational(1,2)))
    assert(bernoulli(2, x) == (x**2 - x + Rational(1, 6)))
    assert(bernoulli(3, x) == (x**3 - (3*x**2)/2 + x/2))

    assert(euler(0, x) == 1)
    assert(euler(1, x) == (x - 1/2))
    assert(euler(2, x) == (x**2 - x))
    assert(euler(3, x) == (x**3 - (3*x**2)/2 + Rational(1, 4)))
}

with (bernoulli(1000)) {|b|
    assert(b.nu % 10**10 == 7950421099)
    assert(b.de == 342999030)
}

assert_eq(bernreal(1e6).as_float(15), '-2.23799235765713e4767529')

assert_eq(8.of{.fibonacci}, %n[0, 1, 1, 2, 3, 5, 8, 13])
assert_eq(8.of{.lucas}, %n[2, 1, 3, 4, 7, 11, 18, 29])

assert(fibonacci(100) == 354224848179261915075)
assert(lucas(100) == 792070839848372253127)

assert(8.of{.fibonacci(3)} == %n[0, 0, 1, 1, 2, 4, 7, 13])
assert(fibonacci(100,3) == 53324762928098149064722658)

assert(8.of { .bell } == %n[1, 1, 2, 5, 15, 52, 203, 877])

assert(euler(0) == 1)
assert(euler(1) == 0)
assert(euler(2) == -1)
assert(euler(3) == 0)
assert(euler(4) == 5)
assert(euler(6) == -61)
assert(euler(8) == 1385)
assert(euler(20) == 370371188237525)

assert_eq(12.of{.catalan}, %n[1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786])

func genocchi(n,x) {
    2*(bernoulli(n, x) - (2**n * bernoulli(n, (x+1)/2)))
}

func genocchi(n) {
    2 * (1 - 2**n) * bernoulli(n)
}

assert_eq(9.of(genocchi), %n[0, -1, -1, 0, 1, 0, -3, 0, 17])

with (Poly(1)) {|x|
    assert(genocchi(0, x) == 0)
    assert(genocchi(1, x) == -1)
    assert(genocchi(2, x) == (1 - 2*x))
    assert(genocchi(3, x) == (3*x - 3*x**2))
    assert(genocchi(4, x) == (-1 + 6*x**2 - 4*x**3))
}

func andre(n) {

    return abs(euler(n)) if n.is_even

    var k = (n+1)/2
    bernoulli(2*k) * ((-4)**k - (-16)**k) / (2*k)
}

assert_eq(11.of(andre), %n[1, 1, 1, 2, 5, 16, 61, 272, 1385, 7936, 50521])
assert_eq(9.of{.partition_count}, %n[1, 1, 2, 3, 5, 7, 11, 15, 22])
assert_eq(11.of{stirling(9, _)}, %n[0, 40320, -109584, 118124, -67284, 22449, -4536, 546, -36, 1, 0])

# https://oeis.org/A008275
assert_eq(10.of {|n| 1..n -> map {|k| stirling(n, k) } }.flat, %n[
        1, -1,
        1, 2, -3,
        1, -6, 11, -6,
        1, 24, -50, 35, -10,
        1, -120, 274, -225, 85, -15,
        1, 720, -1764, 1624, -735, 175, -21,
        1, -5040, 13068, -13132, 6769, -1960, 322, -28,
        1, 40320, -109584, 118124, -67284, 22449, -4536, 546, -36, 1
])

# https://en.wikipedia.org/wiki/Stirling_numbers_of_the_second_kind
assert_eq(10.of {|n| 0..n -> map{|k| stirling2(n,k) } }.flat, %n[
        1,
        0, 1,
        0, 1, 1,
        0, 1, 3, 1,
        0, 1, 7, 6, 1,
        0, 1, 15, 25, 10, 1,
        0, 1, 31, 90, 65, 15, 1,
        0, 1, 63, 301, 350, 140, 21, 1,
        0, 1, 127, 966, 1701, 1050, 266, 28, 1,
        0, 1, 255, 3025, 7770, 6951, 2646, 462, 36, 1
])

assert_eq(5.of{.motzkin}, %n[1, 1, 2, 4, 9])
assert_eq(7.of{.motzkin}, %n[1, 1, 2, 4, 9, 21, 51])
assert_eq(10.of{.motzkin}, %n[1, 1, 2, 4, 9, 21, 51, 127, 323, 835])

assert_eq(rising_factorial(1, 100), 100!)
assert_eq(falling_factorial(100, 100), 100!)

assert(factorial(-2).is_nan)
assert(factorial(0) == 1)
assert(factorial(7) == 5040)
assert(factorial(19) == 121645100408832000)
assert(factorial(31) == 8222838654177922817725562880000000)

do {
    var (p, q) = (10**9 + 9, 10**9 + 33) # prime modulo
    var (r, s) = (10**7 + 5, 33333333)   # composite modulo

    assert(factorialmod(r - 1, r) == 0)
    assert(factorialmod(s - 1, s) == 0)
    assert(factorialmod(p - 1, p) == p-1)
    assert(factorialmod(q - 1, q) == q-1)
    assert(factorialmod(p - 50, p) == 854928834)
    assert(factorialmod(q - 1800, q) == 905504050)
    assert(factorialmod(153, r) == (153.factorial % r))
    assert(factorialmod(255, s) == (255.factorial % s))
    assert(factorialmod(4, 3) == 0)
    assert(factorialmod(5, 6) == 0)
}

assert(double_factorial(0) == 1)
assert(double_factorial(7) == 105)
assert(double_factorial(8) == 384)

assert(binomial(0, 0) == 1)
assert(binomial(1, 1) == 1)
assert(binomial(10, 10) == 1)
assert(binomial(1, 2) == 0)
assert(binomial(-1, 2) == 1)
assert(binomial(1, -1) == 0)
assert(binomial(-1, 1) == -1)
#assert(binomial(-1, -1) == 0)      # SymPy bug?
assert(binomial(-1, -1) == 1)
assert(binomial(-10, 1) == -10)
assert(binomial(-10, 7) == -11440)
assert(binomial(-12, -43) == -4280561376)

assert(binomial(gamma(25), 6) == 79232165267303928292058750056084441948572511312165380965440075720159859792344339983120618959044048198214221915637090855535036339620413440000)
assert(binomial(1324, 47) == 906266255662694632984994480774946083064699457235920708992926525848438478406790323869952)
assert(binomial(1735, 43) == 190910140420204130794758005450919715396159959034348676124678207874195064798202216379800)
assert(binomial(2512, 53) == 213894469313832631145798303740098720367984955243020898718979538096223399813295457822575338958939834177325304000)
assert(binomial(3383, 52) == 27922807788818096863529701501764372757272890613101645521813434902890007725667814813832027795881839396839287659777235)
assert(binomial(4321, 51) == 124595639629264868916081001263541480185227731958274383287107643816863897851139048158022599533438936036467601690983780576)

assert(binomial(-1, 2).is_neg == false)
assert(binomial(10, 5).is_neg == false)
assert(binomial(10, -3).is_neg == false)
assert(binomial(-10, -3).is_neg == false)
assert(binomial(-10, 2).is_neg == false)
assert(binomial(-10, 1).is_neg == true)
assert(binomial(-10, 7).is_neg == true)

assert(binomial(-7, -5) == 0)
assert(binomial(-23, -12) == 0)
assert(binomial(Fraction(13, 2), -10) == 0)
assert(binomial(-49, -51) == 1225)

do {
    var (p, q) = (10**5 + 3, 10**9 + 33) # prime modulo
    var r = (10**7 + 5)                  # composite modulo

    # Lucas Theorem
    assert(binomialmod(156675, 4433, p) == Mod(binomial(156675, 4433), p).lift)

    # factorial Mod
    assert(binomialmod(1234, 432, q) == Mod(binomial(1234, 432), q).lift)

    # binomial factorize
    assert(binomialmod(253, 113, r) == Mod(binomial(253, 113), r).lift)

    # using Granville's generalisation of Lucas' Theorem
    assert(binomialmod(10**18, 10**12, p*p) == 3744312326)
}

do {

    var (p, q) = (10**5 + 3, 10**9 + 33) # prime modulo
    var (r, s) = (10**7 + 5, 33333333)   # composite modulo

    # Lucas Theorem
    assert(binomialmod(123456, 43253, p) == Mod(binomial(123456, 43253), p).lift)
    assert(binomialmod(-178911, 237, p) == Mod(-binomial(178911 + 237 - 1, 237), p).lift)
    assert(binomialmod(-178911, 238, p) == Mod(binomial(178911 + 238 - 1, 238), p).lift)

    # factorial Mod
    assert(binomialmod(9734, 451, q) == Mod(binomial(9734, 451), q).lift)
    assert(binomialmod(-10733, 4459, q) == Mod(binomial(-10733, 4459), q).lift)
    assert(binomialmod(-15733, 4458, q) == Mod(binomial(-15733, 4458), q).lift)
    assert(binomialmod(23, -38, q) == 0)
    assert(binomialmod(23, 38, q) == 0)

    # binomial factorize
    assert(binomialmod(753, 119, r) == Mod(binomial(753, 119), r).lift)
    assert(binomialmod(3781, 948, s) == Mod(binomial(3781, 948), s).lift)
    assert(binomialmod(25773, 1793, s) == Mod(binomial(25773, 1793), s).lift)
    assert(binomialmod(-753, 118, r) == Mod(binomial(-753, 118), r).lift)
    assert(binomialmod(-25773, 1793, s) == Mod(binomial(-25773, 1793), s).lift)
}

assert_eq(10.of{.subfactorial}, %n[1, 0, 1, 2, 9, 44, 265, 1854, 14833, 133496])
assert(subfactorial(23) == 9510425471055777937262)
assert(subfactorial(NaN).is_nan)
#assert(subfactorial(Inf).is_inf)   # fixme?

say "** Test passed!"

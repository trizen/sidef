#!/usr/bin/ruby

# Tests for some Number methods.

func A358860(n) {
    for k in (1..Inf) {
        var t = pyramidal(k, n)
        if (t.divisors.count {|d| d.is_pyramidal(n) } == n) {
            return t
        }
    }
}

assert_eq(A358860.map(3..9), %n[56, 140, 4200, 331800, 611520, 8385930, 1071856800])
assert_eq(A358860(11), 78540000)
assert_eq(A358860(14), 22241349900)

assert(
    %n[56, 140, 4200, 331800, 611520, 8385930, 1071856800, 41086892000, 78540000, 38102655397426620, 59089382788800, 22241349900, 2326493030400, 7052419469195100, 886638404171520].map_kv {|k,v|
        v.divisors.count {|d| d.is_pyramidal(k+3) } == (k+3)
    }.all
)

assert(
    %n[6, 36, 210, 4560, 6426, 326040, 4232250, 1969110, 296676380, 4798080, 166289760, 73765692000, 712750500, 50561280, 33944067893736, 2139168754800, 4292572951800, 1414764341760, 72461756727360, 180975331456920, 1870768457500800, 5498331930000, 153698278734000].map_kv{ |k,v|
        v.divisors.count {|d| d.is_polygonal(k+3) } == (k+3)
    }.all
)

func A358861(n) {
    for k in (1..Inf) {
        var t = centered_polygonal(k, n)
        if (t.divisors.count {|d| d.is_centered_polygonal(n) } == n) {
            return t
        }
    }
}

assert_eq(A358861.map(3..9), %n[64, 925, 2976, 93457, 866272, 11025, 3036880])

assert(
    %n[64, 925, 2976, 93457, 866272, 11025, 3036880, 18412718645101, 9283470627432, 201580440699781, 92839099743040, 5236660451226975, 66779973961058176].map_kv {|k,v|
        v.divisors.count {|d| d.is_centered_polygonal(k+3) } == (k+3)
    }.all,
)

assert(
    %n[316, 1625, 456, 3964051, 21568, 6561, 346528, 3588955448828761, 1684992, 210804461608463437, 36865024, 835904150390625, 2052407296].map_kv {|k,v|
        v.is_centered_polygonal(k+3)
    }.all,
)

assert(
    %n[460, 99905, 463326, 808208947, 23089262218, 12442607161209225, 53780356630, 700326051644920151, 46634399568693102, 45573558879962759570353].map_kv{|k,v|
        v.is_centered_polygonal(k+3)
    }.all
)

assert(
    %n[20, 140, 405, 2856, 25296, 111720, 25984, 5474000, 237600, 223826688, 3852800, 268565760, 1834725376, 175861400000, 335674368, 2863363937280, 4383831556096, 206015846400, 3400704000, 938209120583680, 2981338216980480, 21463949229465600, 45410367307776, 72056803765911552, 4803826408397209600, 1536502117117468999680, 10823784744326529024].map_kv{|k,v|
        v.is_pyramidal(k+3)
    }.all
)

assert(
    %n[84, 1785, 299880, 1020510, 8897460, 102612510, 33367223274, 249417828660, 9177835927260, 10064864238489060, 5558913993302670, 15633689593760207970, 3792821921183752657200].map_kv{|k,v|
        v.is_pyramidal(k+3)
    }.all
)

assert(
    %n[66, 44100, 11310, 103740, 3333330, 185040240, 15529888374, 626141842326, 21647593547580, 351877410344460, 82634328555218440, 2383985537862979050, 239213805711830629680].map_kv{|k,v|
        v.is_polygonal(k+3)
    }.all
)

assert(
    %n[28, 16, 176, 4950, 8910, 1408, 346500, 277992, 7542080, 326656, 544320, 120400000, 145213440, 48549888, 4733575168, 536813568, 2149576704, 3057500160, 938539560960, 1358951178240, 36324805836800, 99956555776, 49212503949312, 118747221196800, 59461613912064, 13749193801728, 7526849672380416, 98516240758210560, 4969489493917696, 78673429816934400, 4467570822566903808, 1013309912383488000].map_kv{|k,v|
        v.is_polygonal(k+3)
    }.all
)

assert(256.is_centered_polygonal(8) -> not)
assert_eq(4422094135361.divisors.count { .is_centered_polygonal(16) }, 9)
assert_eq(1415913990579036.divisors.count { .is_centered_polygonal(17) }, 17)

for k in (8, 9, 10, 16) {
    assert_eq(
        30.of{.centered_polygonal(k)},
        30.by{.is_centered_polygonal(k)},
    )
}

assert_eq(22481472512595506664194504339096889.special_factor(3), %n[3, 3, 2890274768627, 864257411579942987723])

assert_eq(
    %n[1, 2, 4, 7, 24, 77, 27, 87, 220, 104, 1007, 175, 1000, 1287, 6187, 10867, 5967, 13727, 5719, 22847, 18980, 21735, 55912, 245024, 195975, 288144, 196735, 108927, 1107567, 5404112, 3145824, 3768687, 5405575, 1245887, 521559, 1101600].map {.pyramidal(4).divisors.count{.is_pyramidal(4)}},
    @(1..36)
)

assert_eq(2781999.pyramidal(4).divisors.count{.is_pyramidal(4)}, 40)

# OEIS: A359492
assert([
    56, 48, 96, 192, 384, 2816, 1536, 109568, 10582016, 12288, 7429922816, 64176128, 4318724096, 196608, 60486975488, 9388028592128,
    214058289594368, 849566088298496, 896029329195008, 10228945815339008, 54409680373415936, 188039754665689088, 246561971023904768, 966464636658384896, 1278798840983453696,
].all {|k|
    sum_of_squares(k + 2).any { .all_prime }
})

assert_eq(
    35.by{.lucas.sum_of_squares.is_empty},
    %n[2, 4, 5, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45]
)

assert_eq(
    25.by{.fib.sum_of_squares.is_empty},
    %n[4, 8, 10, 16, 18, 20, 22, 24, 28, 30, 32, 34, 36, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64],
)

assert_eq(sqrtmod_all(1, 9240), modular_quadratic_formula(1, 0, -1, 9240))

assert_eq(100!.lambda, 332973202860013922680445208953998855372800000000.primorial_inflation)
assert_eq(znorder(10007, 100!), primorial_inflation(2064433857732086320618760295514792903311360000000/37))
assert_eq(1000!.lambda, (55281864384030500867297930540689107399572972175507071693826312987653355350265413040245283723930072237568837512166511977539448854030321586944248953222459802388444635003694923824104885729954487567903482871527930897238685190859628192876344433619480084480000000000000000000/2533867606747592060037418985336030954711).primorial_inflation.primorial_inflation)

with (293704261822873968440328001567322976674825399839117774762673364098772284012658575519736143477741827196948158314218308343078251272252678808701963761138092032734875068048169405766629056803483149710379521966472204505650851796616510647719125110332703342712654897625331221299419872841467740291599817033329358258899823776277457145596877713813274648257753794198816415050929236864597071110063166219083719708990177337345) {|n|
    assert_eq(n.lambda, 284435712)
    assert_eq(znorder(2, n), 142217856)
}

assert_eq(znorder(10007, 1000!), (861500621725188832434702344588144306124156101524253446990817623477862829593595598892038664735623774383302478635546238006736384033348200730596052606164062758302085852517040353431861543564642095450085087127648782576968267055396259892229735146621411262464000000000000000000/73482160595680169741085150574744897686619).primorial_inflation.primorial_inflation)
assert_eq(10000!.lambda, (1690684144988960596108374824253089294268430375226131026561303976736264150382357292791356539189616935381266871027101170555656484133948985495332184439065946195253355854493751366443991599581601590498942933482825894696604857263291339669647195801255112511447972490656505399614508865927799801670740412373652820260593955584309221563301584303812549886993445131587017401977070049073014669211865020588334531886111857637753409078583231950392569472910007333104817886289560796433892026454043629619756721532877439924116651768554172018383993566865594716069028305730895888661097918564001471816435044359974320466813736093528465153358457416216493587387321247706607726271276800604680330000287311683327406357922183648112132450472246689406040113586651411446073709307966566872097486402870250413514989382154888536123522274336864132020596955060544643618630195973433437492472680044413746028447536944367907989938639801938429628124074063464063781548846922965790985850324420172138791819008492084777549669774872722080759027163800572015809495259843411624880806160150018667647721798765844761188476540352247738605070473332622148303029943591941746650857045913198218710761612104673461978285555562562198759496385535480393318175885338827144653244244296301507725584931342437880859864608485199764593883980358741189628706650909800328801552488975139010428045385779929927626432478689413357024170046189842808072178731411328956515139229642353576781216760581325738674842305382777131806352496517276317866442095964615752152047202328461613053049653574190970084759733339571947402306878666556900206211840172804427765941857107643428886379874438373204584661690083547761164556472157799325572729018353607061813529420766335933066978446988408947780704063093912248586883880862098525445496391139899494334307227111573716195195330349658292746475631486421947897497403481934940947661666918456152563505251489650787460118038572512788832849046857604642683803849308072813345099354622861576852144825018183090063309890228543087814498987212687905072228216139202899892182189589865163421374006723178192686589754983495851969723745547489968859459938601108506575315719582142259673268948670277091879385476412497449882574861401765720168721447961069655655110017402660697288715842838028802843405014575829448953733154875180716341274197994766164321556808868562413599437710547699411758931185335756231857087997643805602195088943900892504971612630950137044612324214172401898833456193771017996709471436017269803608146902331629747209191664194256662102120857600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000/431746270056781074928611187680445130995302587718789577025593027245887510664340590569770615806844874087360836943948853784345269028793180121436750683618643262960064154674678744831934472506979704050889472036938184634122287251009747281255593819625348934127251625218633925462567097450062191466966674162074531469580168616605779566386682111).primorial_inflation.primorial_inflation)

with (5373477536385214579076118706681399189136056405078551802232403683) {|n|
    assert_eq(znorder(2,n), 1343369384096303644765361671673810428399165685771936795748244426)
    assert_eq(n.lambda, 1343369384096303644765361671673810428399165685771936795748244426)
}

with (898943937249247967890084629421065) {|n|
    assert_eq(znorder(2, n), 6238232)
    assert_eq(znorder(7, n), 1908898992)
    assert_eq(n.lambda, 1908898992)
}

with (18324199296528369643710689094829325758885303308048705) {|n|
    assert_eq(znorder(2, n), 64064)
    assert_eq(znorder(7, n), 25369344)
    assert_eq(n.lambda, 126846720)
}

assert(11682055030486217293504152.is_powerful)
assert(11682055030486217293504152.is_powerful(3))
assert(!11682055030486217293504152.is_powerful(4))

assert(1460256878810777161688019.is_powerful(3))
assert(!1460256878810777161688019.is_powerful(4))

assert(!14602568918070634025253522272067053504506527.is_powerful(3))
assert(1460256909476171831372101081500751200235359458990517.is_powerful(3))
assert(!1460256909476171831372101081500751200235359458990517.is_powerful(4))

assert(2654831309755897015196969114196153598344412605095549788660532229768507.is_powerful(2))
assert(!2654831309755897015196969114196153598344412605095549788660532229768507.is_powerful(3))

assert(2654831328339716183488248220574937397717487793506438024329380750392232608379549.is_powerful(2))
assert(!2654831328339716183488248220574937397717487793506438024329380750392232608379549.is_powerful(3))

assert(1460256928021434655798316478370610460398551688892352963373641452941425902187363577511692721.is_powerful(3))
assert(!1460256928021434655798316478370610460398551688892352963373641452941425902187363577511692721.is_powerful(4))

assert(26548313519677150410209789205385718012281319668387467761792668205593470104511831947946797914480017.is_powerful(3))
assert(!26548313519677150410209789205385718012281319668387467761792668205593470104511831947946797914480017.is_powerful(4))

assert(265483133842807524076311081313665605829482598110841564541397617740212072769909742075824591625017189.is_powerful(3))
assert(!265483133842807524076311081313665605829482598110841564541397617740212072769909742075824591625017189.is_powerful(4))

assert(1460256956788496341716254696500184680851326068463573650443982525119043234587987345455103953573816771129870990470105170979993609298318293611.is_powerful(3))
assert(!1460256956788496341716254696500184680851326068463573650443982525119043234587987345455103953573816771129870990470105170979993609298318293611.is_powerful(4))
assert(26548314042678930454790680661333238104437959139809272447067908484581199692755967209072117470953200991417996542308013259099939273355991707503393547.is_powerful(4))
assert(!26548314042678930454790680661333238104437959139809272447067908484581199692755967209072117470953200991417996542308013259099939273355991707503393547.is_powerful(5))

assert(2092529739035448929709059316860203225337.is_almost_prime(4))
assert(2092529739035448929709059316860203225337.is_omega_prime(4))

assert(998032357356412591777676213773404801168359155639300810254677.is_almost_prime(4))
assert(998032357356412591777676213773404801168359155639300810254677.is_omega_prime(4))

assert(1000000000000000000000000000000000000000239299329230617529590083.is_almost_prime(5))
assert(1000000000000000000000000000000000000000239299329230617529590083.is_omega_prime(5))

say ":: Test passed!"

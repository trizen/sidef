#!/usr/bin/ruby

# Testing binomialmod(n,k,m) with large inputs.

func binomial(n,k) is cached {
    ::binomial(n,k)
}

assert_eq(binomialmod(1e6, 1e3, ipow(2, 128) + 1), binomial(1e6, 1e3) % (ipow(2, 128) + 1));
assert_eq(binomialmod(1e6, 1e3, ipow(2, 128) - 1), binomial(1e6, 1e3) % (ipow(2, 128) - 1));

assert_eq(binomialmod(1e6, 1e4, (ipow(2, 128) + 1)**2), binomial(1e6, 1e4) % ((ipow(2, 128) + 1)**2));
assert_eq(binomialmod(1e6, 1e4, (ipow(2, 128) - 1)**2), binomial(1e6, 1e4) % ((ipow(2, 128) - 1)**2));

assert_eq(binomialmod(1e10, 1e4, prev_prime(2**64)**2), binomial(1e10, 1e4) % prev_prime(2**64)**2)
assert_eq(binomialmod(1e10, 1e4, next_prime(2**64)**2), binomial(1e10, 1e4) % next_prime(2**64)**2)

assert_eq(binomialmod(1e10, 1e4, prev_prime(2**64)), binomial(1e10, 1e4) % prev_prime(2**64))
assert_eq(binomialmod(1e10, 1e4, next_prime(2**64)), binomial(1e10, 1e4) % next_prime(2**64))

if (Number(Number.ULONG_MAX) > 2**32) {
    assert_eq(binomialmod(1e10, 1e3, (2**127 + 1)), binomial(1e10, 1e3) % (2**127 + 1))
    assert_eq(binomialmod(1e10, 1e3, (2**127 - 1)), binomial(1e10, 1e3) % (2**127 - 1))
    assert_eq(binomialmod(1e10, 1e5, (2**127 - 1)), binomial(1e10, 1e5) % (2**127 - 1))
    assert_eq(binomialmod(1e10, 1e5, (2**127 + 1)), binomial(1e10, 1e5) % (2**127 + 1))

    assert_eq(binomialmod(1e10, 1e10 - 1e5, (2**127 - 1)), binomial(1e10, 1e5) % (2**127 - 1))
    assert_eq(binomialmod(1e10, 1e10 - 1e5, (2**127 + 1)), binomial(1e10, 1e5) % (2**127 + 1))
    assert_eq(binomialmod(1e10, 1e10 - 1e5, (2**127 + 1)**2), binomial(1e10, 1e5) % (2**127 + 1)**2)

    assert_eq(binomialmod(1e10, 1e5, (2**127 - 1)**2), binomial(1e10, 1e5) % (2**127 - 1)**2)
    assert_eq(binomialmod(1e10, 1e4, (2**128 - 1)**2), binomial(1e10, 1e4) % (2**128 - 1)**2)
    assert_eq(binomialmod( 1e7, 1e5, (2**128 - 1)**2), binomial(1e7, 1e5) % (2**128 - 1)**2)

    assert_eq(binomialmod(4294967291 + 1, 1e5, 4294967291**2), binomial(4294967291 + 1, 1e5) % 4294967291**2)
    assert_eq(binomialmod(2**60 - 99, 1e5, prev_prime(1e9)), binomial(2**60 - 99, 1e5) % prev_prime(1e9))
    assert_eq(binomialmod(2**60 - 99, 1e5, next_prime(2**64)), binomial(2**60 - 99, 1e5) % next_prime(2**64))
}

var upto = 10
for n in (-upto .. upto), k in (-upto .. upto), m in (-upto .. upto) {
    if (m != 0) {
        #say "Testing: binomial(#{n}, #{k}, #{m})"
        assert_eq(binomialmod(n, k, m), binomial(n, k) % m)
    }
}

# OEIS: A084699
%n[12, 30, 56, 424, 992, 16256, 58288, 119984, 356992, 1194649, 9973504, 12327121, 13141696, 22891184, 67100672, 233850649, 3386741824, 17179738112, 274877382656, 750984028672, 33029195197184, 1145067923695616, 422612863956511744].each{|n|
    assert_eq(binomialmod(2*n, n, n), powmod(2, n, n))
}

say "** Test passed!"

#!/usr/bin/ruby

# Testing binomialmod(n,k,m) with large inputs.

func binomial(n,k) is cached {
    ::binomial(n,k)
}

assert_eq(binomialmod(1e6, 1e3, ipow(2, 128) + 1), binomial(1e6, 1e3) % (ipow(2, 128) + 1));
assert_eq(binomialmod(1e6, 1e3, ipow(2, 128) - 1), binomial(1e6, 1e3) % (ipow(2, 128) - 1));

assert_eq(binomialmod(1e6, 1e4, (ipow(2, 128) + 1)**2), binomial(1e6, 1e4) % ((ipow(2, 128) + 1)**2));
assert_eq(binomialmod(1e6, 1e4, (ipow(2, 128) - 1)**2), binomial(1e6, 1e4) % ((ipow(2, 128) - 1)**2));

assert_eq(binomialmod(1e10, 1e4, prev_prime(2**64)**2), binomial(1e10, 1e4) % prev_prime(2**64)**2)
assert_eq(binomialmod(1e10, 1e4, next_prime(2**64)**2), binomial(1e10, 1e4) % next_prime(2**64)**2)

assert_eq(binomialmod(1e10, 1e4, prev_prime(2**64)), binomial(1e10, 1e4) % prev_prime(2**64))
assert_eq(binomialmod(1e10, 1e4, next_prime(2**64)), binomial(1e10, 1e4) % next_prime(2**64))

if (Number(Number.ULONG_MAX) > 2**32) {
    assert_eq(binomialmod(1e10, 1e3, (2**127 + 1)), binomial(1e10, 1e3) % (2**127 + 1))
    assert_eq(binomialmod(1e10, 1e3, (2**127 - 1)), binomial(1e10, 1e3) % (2**127 - 1))
    assert_eq(binomialmod(1e10, 1e5, (2**127 - 1)), binomial(1e10, 1e5) % (2**127 - 1))
    assert_eq(binomialmod(1e10, 1e5, (2**127 + 1)), binomial(1e10, 1e5) % (2**127 + 1))

    assert_eq(binomialmod(1e10, 1e10 - 1e5, (2**127 - 1)), binomial(1e10, 1e5) % (2**127 - 1))
    assert_eq(binomialmod(1e10, 1e10 - 1e5, (2**127 + 1)), binomial(1e10, 1e5) % (2**127 + 1))
    assert_eq(binomialmod(1e10, 1e10 - 1e5, (2**127 + 1)**2), binomial(1e10, 1e5) % (2**127 + 1)**2)

    assert_eq(binomialmod(1e10, 1e5, (2**127 - 1)**2), binomial(1e10, 1e5) % (2**127 - 1)**2)
    assert_eq(binomialmod(1e10, 1e4, (2**128 - 1)**2), binomial(1e10, 1e4) % (2**128 - 1)**2)
    assert_eq(binomialmod( 1e7, 1e5, (2**128 - 1)**2), binomial(1e7, 1e5) % (2**128 - 1)**2)

    assert_eq(binomialmod(4294967291 + 1, 1e5, 4294967291**2), binomial(4294967291 + 1, 1e5) % 4294967291**2)
    assert_eq(binomialmod(2**60 - 99, 1e5, prev_prime(1e9)), binomial(2**60 - 99, 1e5) % prev_prime(1e9))
    assert_eq(binomialmod(2**60 - 99, 1e5, next_prime(2**64)), binomial(2**60 - 99, 1e5) % next_prime(2**64))
}

var upto = 10
for n in (-upto .. upto), k in (-upto .. upto), m in (-upto .. upto) {
    if (m != 0) {
        #say "Testing: binomial(#{n}, #{k}, #{m})"
        assert_eq(binomialmod(n, k, m), binomial(n, k) % m)
    }
}

# OEIS: A084699
%n[12, 30, 56, 424, 992, 16256, 58288, 119984, 356992, 1194649, 9973504, 12327121, 13141696, 22891184, 67100672, 233850649, 3386741824, 17179738112, 274877382656, 750984028672, 33029195197184, 1145067923695616, 422612863956511744].each{|n|
    assert_eq(binomialmod(2*n, n, n), powmod(2, n, n))
}

# OEIS: A080469
%n[36, 57, 121, 132, 552, 8397, 7000713, 9692541, 36294723, 564033861].each {|n|
    assert_eq(binomialmod(3*n, n, n), powmod(3, n, n))
}

# OEIS: A260640
%n[1, 3, 6, 12, 21, 35, 44, 55, 60, 70, 78, 88, 90, 99, 102, 110, 117, 119, 120, 133, 156, 171, 176, 180, 184, 204, 207, 220, 225, 230, 231, 234, 238, 240, 247, 252, 255, 285, 286, 300, 312, 341, 342, 348, 360, 368, 372, 391, 403, 408, 414, 425, 434, 460, 462, 465, 468, 481, 483, 494, 495, 504, 506, 510, 550, 555, 561, 572, 574, 585, 600].all {|n|
    assert_eq(binomialmod(3*n, n, n), 0)
}

# OEIS: A109642
%n[4, 15, 57, 765, 1025, 2097, 4947, 9189, 103599, 216927, 4346128, 1558269, 1977777].each_kv {|n,m|
    assert_eq(binomialmod(3*m, m, m), powmod(3, n+1, m))
}

# OEIS: A109760
%n[4, 365, 400, 685, 3200, 6400, 12550, 12800, 16525, 25600, 51200, 225125, 70463125, 271094125, 431434441].each {|n|
    assert_eq(binomialmod(5*n, n, n), powmod(5, n, n))
}

# OEIS: A290040
%n[260, 1056, 1060, 3460, 3905, 4428, 5000, 5060, 5512, 5860, 6372, 6596, 7460, 8200, 8908, 9612, 9860, 10660, 11556, 12260, 12625, 13060, 14600, 14660, 14744, 14796, 15460, 16260, 17060, 17800, 17860, 18425, 18496, 18660, 19396, 20260, 21717, 21860, 22168, 22248, 22660, 24260, 24616, 25164, 26660, 27108, 27400, 27460, 28872, 29060, 29128, 29860].each {|m|
    assert(m.divisors.slice(1).any {|d| binomialmod(m+d, d, m) == 1 })
}

# OEIS: A260209
%n[1, 3, 25, 245, 121, 169, 867, 3249, 6877, 9251, 961, 15059, 57154, 61017, 68479, 106742, 201898, 208376, 107736, 176435, 330398, 237158, 158447, 213867, 903264, 856884, 21218, 755634, 1259386, 944906, 161290, 531991, 150152, 656914, 1287658, 592826, 640874].each_kv {|n,A|
    var p = prime(n+1)
    assert_eq(binomialmod(2*p - 1, p-1, p**4), (A*p + 1) % (p**4))
}

# OEIS: A263429
%n[2, 3, 5, 16843].each_kv{|n,p|
    assert_eq(binomialmod(2*p - 1, p-1, p**(n+1)), 1)
}

assert_eq(binomialmod(2*4514260853041 - 1, 4514260853041 - 1, 4514260853041.isqrt), 1)
assert_eq(binomialmod(2*283686649 - 1, 283686649, 283686649.isqrt), 1)

#assert_eq(binomialmod(2*283686649 - 1, 283686649, 283686649), 1)                       # this takes 3.5s
#assert_eq(binomialmod(2*283686649 - 1, 283686649, 283686649**2), 1)                    # this takes 7.5s
#assert_eq(binomialmod(2*4514260853041 - 1, 4514260853041 - 1, 4514260853041), 1)       # FIXME: this takes a lot of time

assert_eq(binomialmod(2*16843 - 1, 16843-1, 16843**4), 1)
assert_eq(binomialmod(2*2124679 - 1, 2124679-1, 2124679**2), 1)

assert_eq(binomialmod(2*2001341 - 1, 2001341-1, 2001341), 1)
assert_eq(binomialmod(2*16024189487 - 1, 16024189487-1, 16024189487), 1)

assert_eq(
    100.of{|n| binomial(2*n, n) % binomial(2*n - 2, n-1) }.slice(1),
    100.of{|n| binomialmod(2*n, n, binomial(2*n - 2, n-1)) }.slice(1),
)

# Morleyâ€™s congruence
primes(5,100).each {|p|
    assert((-1)**((p-1)/2) * binomialmod(p-1, (p-1)/2, p**3) -> is_congruent(powmod(4, p-1, p**3), p**3))
}

assert_eq(
    100.of{|n| binomial(2*n, n) % ((n+1)*(n+2)) },
    100.of{|n| binomialmod(2*n, n, (n+1)*(n+2)) },
)

say "** Test passed!"

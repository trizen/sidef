
=encoding utf8

=head1 NAME

Sidef::Types::Glob::File

=head1 DESCRIPTION

This class implements ...

=head1 SYNOPSIS

var obj = File(...)


=head1 INHERITS

Inherits methods from:

       * Sidef::Types::String::String

=head1 METHODS

=head2 abs

    self.abs(base)

Returns the

Aliases: I<abs_name>, I<absname>, I<rel2abs>

=cut

=head2 abs_path

    self.abs_path

Returns the

Aliases: I<realpath>

=cut

=head2 access_time_days_diff

    self.access_time_days_diff

Returns the

=cut

=head2 append

    self.append(string, mode)

Returns the

=cut

=head2 base

    self.base

Returns the

Aliases: I<base_name>, I<basename>

=cut

=head2 change_time_days_diff

    self.change_time_days_diff

Returns the

=cut

=head2 chmod

    self.chmod(permission)

Returns the

=cut

=head2 chown

    self.chown(uid, gid)

Returns the

=cut

=head2 compare

    self.compare(file)

Returns the

=cut

=head2 cp

    self.cp(file)

Returns the

Aliases: I<copy>

=cut

=head2 delete

    file.delete

Deletes a file and return C<true> on success.

Will not attempt to delete directories.

Aliases: I<remove>

=cut

=head2 dir

    file.dir

Returns the directory of the filename, similar to the Unix shell command C<dirname>.

Aliases: I<dir_name>, I<dirname>

=cut

=head2 dump

    file.dump

Returns a String representation of the File object.

=cut

=head2 edit

    self.edit(code)

Returns the

=cut

=head2 exists

    file.exists

Returns C<true> if file exists.

=cut

=head2 has_setgid_bit

    file.has_setgid_bit

Returns C<true> if file has setgid bit set.

=cut

=head2 has_setuid_bit

    file.has_setuid_bit

Returns C<true> if file has setuid bit set.

=cut

=head2 has_sticky_bit

    file.has_sticky_bit

Returns C<true> if file has sticky bit set.

=cut

=head2 is_abs

    file.is_abs

Returns C<true> if file name is absolute.

Aliases: I<is_absolute>

=cut

=head2 is_binary

    file.is_binary

Returns C<true> if file looks like a binary file (heuristic guess).

=cut

=head2 is_block

    file.is_block

Returns C<true> if file is a block special file.

=cut

=head2 is_char_device

    file.is_char_device

Returns C<true> if file is a character special file.

=cut

=head2 is_dir

    file.is_dir

Returns C<true> if file is a directory.

Aliases: I<is_directory>

=cut

=head2 is_empty

    file.is_empty

Returns C<true> if file has zero size (i.e.: is empty).

=cut

=head2 is_executable

    file.is_executable

Returns C<true> if file is executable by effective uid/gid.

=cut

=head2 is_file

    file.is_file

Returns C<true> if file is a plain file.

=cut

=head2 is_link

    file.is_link

Returns C<true> if file is a symbolic link.

Returns C<false> if symlinks aren't supported by the file system.

=cut

=head2 is_owned

    file.is_owned

Returns C<true> if file is owned by effective uid.

=cut

=head2 is_readable

    file.is_readable

Returns C<true> if file is readable by effective uid/gid.

=cut

=head2 is_real_executable

    file.is_real_executable

Returns C<true> if file is executable by real uid/gid.

=cut

=head2 is_real_owned

    file.is_real_owned

Returns C<true> if file is owned by real uid.

=cut

=head2 is_real_readable

    file.is_real_readable

Returns C<true> if file is readable by real uid/gid.

=cut

=head2 is_real_writeable

    file.is_real_writeable

Returns C<true> if file is writable by real uid/gid.

=cut

=head2 is_socket

    file.is_socket

Returns C<true> if file is a socket.

=cut

=head2 is_text

    file.is_text

Returns C<true> if file is an ASCII or UTF-8 text file (heuristic guess).

=cut

=head2 is_writeable

    file.is_writeable

Returns C<true> if file is writable by effective uid/gid.

=cut

=head2 link

    oldfile.link(newfile)

Creates a new filename linked to the old filename.

Returns C<true> for success, C<false> otherwise.

=cut

=head2 lstat

    self.lstat

Returns the

=cut

=head2 make

    self.make(*args)

Returns the

Aliases: I<touch>, I<create>, I<mkfile>

=cut

=head2 md5

    self.md5

Returns the

=cut

=head2 mktemp

    self.mktemp(:opts)

Returns the

Aliases: I<make_tmp>, I<make_temp>

=cut

=head2 modification_time_days_diff

    self.modification_time_days_diff

Returns the

=cut

=head2 mv

    self.mv(file)

Returns the

Aliases: I<move>

=cut

=head2 name

    self.name

Returns the

=cut

=head2 new

    self.new

Returns the

Aliases: I<call>

=cut

=head2 open

    self.open(mode, fh_ref, err_ref)

Returns the

=cut

=head2 open_a

    self.open_a(*args)

Returns the

Aliases: I<open_append>

=cut

=head2 open_arw

    self.open_arw(*args)

Returns the

Aliases: I<open_append_read_write>

=cut

=head2 opendir

    self.opendir(*args)

Returns the

=cut

=head2 open_r

    self.open_r(*args)

Returns the

Aliases: I<open_read>

=cut

=head2 open_rw

    self.open_rw(*args)

Returns the

Aliases: I<open_read_write>

=cut

=head2 open_w

    self.open_w(*args)

Returns the

Aliases: I<open_write>

=cut

=head2 read

    self.read(mode)

Returns the

=cut

=head2 read_link

    self.read_link

Returns the

Aliases: I<readlink>

=cut

=head2 rel

    self.rel(base)

Returns the

Aliases: I<abs2rel>, I<rel_name>, I<relname>

=cut

=head2 rename

    self.rename(file)

Returns the

=cut

=head2 sha1

    self.sha1

Returns the

=cut

=head2 sha256

    self.sha256

Returns the

=cut

=head2 sha512

    self.sha512

Returns the

=cut

=head2 size

    self.size

Returns the

=cut

=head2 split

    self.split

Returns the

=cut

=head2 splitpath

    self.splitpath

Returns the

=cut

=head2 stat

    self.stat

Returns the

=cut

=head2 symlink

    oldfile.symlink(newfile)

Creates a new filename symbolically linked to the old filename.

Returns C<true> for success, C<false> otherwise.

=cut

=head2 sysopen

    self.sysopen(var_ref, mode, perm)

Returns the

=cut

=head2 to_file

    self.to_file

Returns the

=cut

=head2 to_s

    self.to_s

Returns the

Aliases: I<to_str>

=cut

=head2 truncate

    self.truncate(length)

Returns the

=cut

=head2 unlink

    self.unlink(*args)

Returns the

=cut

=head2 utime

    self.utime(atime, mtime)

Returns the

=cut

=head2 write

    self.write(string, mode)

Returns the

=cut


=encoding utf8

=head1 NAME

Sidef::Types::Range::Range

=head1 DESCRIPTION

This class implements ...

=head1 SYNOPSIS

var obj = Range(...)

=head1 METHODS

=head2 *

    a * b

Returns the

Aliases: I<mul>

=cut

=head2 +

    a + b

Returns the

Aliases: I<add>

=cut

=head2 -

    a - b

Returns the

Aliases: I<sub>

=cut

=head2 ...

    a ... b

Returns the

Aliases: I<to_list>

=cut

=head2 /

    a / b

Returns the

Aliases: I<÷>, I<div>

=cut

=head2 ==

    a == b

Returns the

Aliases: I<eq>

=cut

=head2 ≠

    a ≠ b

Returns the

Aliases: I<!=>, I<ne>

=cut

=head2 accumulate

    self.accumulate(arg)

Returns the

=cut

=head2 accumulate_by

    self.accumulate_by(arg)

Returns the

=cut

=head2 all

    self.all(block)

Returns the

=cut

=head2 any

    self.any(block)

Returns the

=cut

=head2 bounds

    self.bounds

Returns the

=cut

=head2 by

    self.by(step)

Returns the

=cut

=head2 cons

    self.cons(n, block)

Returns the

Aliases: I<map_cons>

=cut

=head2 contain

    self.contain(value)

Returns the

Aliases: I<include>, I<contains>, I<includes>

=cut

=head2 count

    self.count(arg)

Returns the

=cut

=head2 count_by

    self.count_by(arg)

Returns the

=cut

=head2 cross_operator

    self.cross_operator(*args)

Returns the

=cut

=head2 each_cons

    self.each_cons(n, block)

Returns the

=cut

=head2 each_slice

    self.each_slice(n, block)

Returns the

=cut

=head2 first_by

    self.first_by(block)

Returns the

=cut

=head2 flip

    self.flip

Returns the

Aliases: I<reverse>

=cut

=head2 for

    self.for(block)

Returns the

Aliases: I<each>, I<foreach>

=cut

=head2 from

    self.from(from)

Returns the

=cut

=head2 grep

    self.grep(block)

Returns the

Aliases: I<select>

=cut

=head2 head

    self.head(num)

Returns the

Aliases: I<first>

=cut

=head2 join

    self.join(sep)

Returns the

=cut

=head2 kv

    self.kv

Returns the

Aliases: I<pairs>, I<zip_indices>

=cut

=head2 last

    self.last(num)

Returns the

Aliases: I<tail>

=cut

=head2 last_by

    self.last_by(block)

Returns the

=cut

=head2 len

    self.len

Returns the

Aliases: I<length>

=cut

=head2 map

    self.map(block)

Returns the

=cut

=head2 map_operator

    self.map_operator(*args)

Returns the

=cut

=head2 max

    self.max(block)

Returns the

=cut

=head2 max_by

    self.max_by(block)

Returns the

=cut

=head2 min

    self.min(block)

Returns the

=cut

=head2 min_by

    self.min_by(block)

Returns the

=cut

=head2 neg

    self.neg

Returns the

=cut

=head2 new

    self.new

Returns the

Aliases: I<call>

=cut

=head2 none

    self.none(block)

Returns the

=cut

=head2 pam_operator

    self.pam_operator(*args)

Returns the

=cut

=head2 pick

    self.pick(n)

Returns the

=cut

=head2 rand

    self.rand(n)

Returns the

Aliases: I<sample>

=cut

=head2 reduce

    self.reduce(op, initial)

Returns the

=cut

=head2 reduce_operator

    self.reduce_operator(op, initial)

Returns the

=cut

=head2 shuffle

    self.shuffle

Returns the

=cut

=head2 slices

    self.slices(n, block)

Returns the

Aliases: I<map_slice>

=cut

=head2 sort

    self.sort(block)

Returns the

=cut

=head2 sort_by

    self.sort_by(block)

Returns the

=cut

=head2 step

    self.step

Returns the

=cut

=head2 to

    self.to(to)

Returns the

=cut

=head2 to_a

    self.to_a

Returns the

Aliases: I<to_array>

=cut

=head2 to_v

    self.to_v

Returns the

Aliases: I<to_vec>, I<to_vector>

=cut

=head2 unroll_operator

    self.unroll_operator(*args)

Returns the

=cut

=head2 while

    self.while(block)

Returns the

=cut

=head2 zip_operator

    self.zip_operator(*args)

Returns the

=cut
